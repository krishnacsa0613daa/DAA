1.bubble sort:

arr = [64, 34, 25, 12, 22, 11, 90]
n = len(arr)
for i in range(n):
    swapped = False
    for j in range(0, n - i - 1):
        if arr[j] > arr[j + 1]:
            arr[j], arr[j + 1] = arr[j + 1], arr[j]
            swapped = True
    if not swapped:
        break
print("Sorted array:", arr)

2.closest pair

import math
points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
n = len(points)
min_distance = float('inf')
closest_pair = None
for i in range(n):
    for j in range(i + 1, n):
        distance = math.sqrt((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2)
        if distance < min_distance:
            min_distance = distance
            closest_pair = (points[i], points[j])
if closest_pair:
    print(f"The closest pair of points is: {closest_pair} with a distance of {min_distance:.2f}")

3.convex hull

points = [(0, 0), (1, 1), (2, 2), (2, 0), (1, 0), (0, 2)]
def is_left(a, b, c):
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0
hull = []
n = len(points)
for i in range(n):
    for j in range(n):
        if i != j:
            on_left = True
            for k in range(n):
                if k != i and k != j:
                    if not is_left(points[i], points[j], points[k]):
                        on_left = False
                        break
            if on_left:
                if points[i] not in hull:
                    hull.append(points[i])
                if points[j] not in hull:
                    hull.append(points[j])
print("Convex Hull points:")
for point in hull:
    print(point)

4.exhaustive search

set_elements = [1, 2, 3]
n = len(set_elements)
subsets = []
for i in range(1 << n): 
    subset = []
    for j in range(n):
        if (i & (1 << j)) > 0:
            subset.append(set_elements[j])
    subsets.append(subset)
print("All subsets:")
for subset in subsets:
    print(subset)

5.insertion sort

arr = [64, 34, 25, 12, 22, 11, 90]
n = len(arr)
for i in range(1, n):
    key = arr[i]
    j = i - 1
    while j >= 0 and arr[j] > key:
        arr[j + 1] = arr[j]
        j -= 1
    arr[j + 1] = key 
print("Sorted array:", arr)

6.selection sort

arr = [64, 25, 12, 22, 11]
n = len(arr)
for i in range(n):
    min_index = i
    for j in range(i + 1, n):
        if arr[j] < arr[min_index]:
            min_index = j
    arr[i], arr[min_index] = arr[min_index], arr[i]
print("Sorted array:", arr)

7.sequential search

arr = [64, 34, 25, 12, 22, 11, 90]
target = 22
n = len(arr)
found = False 
for i in range(n):
    if arr[i] == target:
        found = True
        index = i  
        break  
if found:
    print(f"Element {target} found at index: {index}")
else:
    print(f"Element {target} not found in the array.")

8.string matching

main_string = "hello world"
substring = "world"
n = len(main_string)
m = len(substring)
found = False  
for i in range(n - m + 1): 
    match = True 
    for j in range(m):  
        if main_string[i + j] != substring[j]: 
            match = False 
            break  
    if match:  
        found = True
        start_index = i 
        break  
if found:
    print(f"Substring '{substring}' found at index: {start_index}")
else:
    print(f"Substring '{substring}' not found in the main string.")